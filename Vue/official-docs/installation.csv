Compatibility Note
兼容性

Vue does not support IE8 and below, because it uses ECMAScript 5 features that are un-shimmable in IE8. However it supports all ECMAScript 5 compliant browsers.
Vue 不支持 IE8 及以下版本，因为 Vue 使用了 IE8 无法模拟的 ECMAScript 5 特性。但它支持所有兼容 ECMAScript 5 的浏览器。

Semantic Versioning

Vue follows Semantic Versioning in all its official projects for documented features and behavior. For undocumented behavior or exposed internals, changes are described in release notes.

Release Notes

Latest stable version: 2.7.16

Detailed release notes for each version are available on GitHub.

Vue Devtools

When using Vue, we recommend also installing the Vue Devtools in your browser, allowing you to inspect and debug your Vue applications in a more user-friendly interface.

Direct <script> Include

Simply download and include with a script tag. Vue will be registered as a global variable.

Don't use the minified version during development. You will miss out on all the nice warnings for common mistakes!


Development Version With full warnings and debug mode

Production Version Warnings stripped, 37.70KB min+gzip

For prototyping or learning purposes, you can use the latest version with:

For production, we recommend linking to a specific version number and build to avoid unexpected breakage from newer versions:

If you are using native ES Modules, there is also an ES Modules compatible build:

You can browse the source of the NPM package at xxx.

Vue is also available on unpkg and cdnjs (cdnjs takes some time to sync so the latest release may not be available yet).

Make sure to read about the different builds of Vue and use the production version in your published site, replacing vue.js with vue.min.js. 

This is a smaller build optimized for speed instead of development experience.

NPM is the recommended installation method when building large scale applications with Vue. 

It pairs nicely with module bundlers such as Webpack or Browserify. 

Vue also provides accompanying tools for authoring Single File Components.

Vue provides an official CLI for quickly scaffolding ambitious Single Page Applications. 

It provides batteries-included build setups for a modern frontend workflow. 

It takes only a few minutes to get up and running with hot-reload, lint-on-save, and production-ready builds. 

See the Vue CLI docs for more details.

The CLI assumes prior knowledge of Node.js and the associated build tools.

If you are new to Vue or front-end build tools, we strongly suggest going through the guide without any build tools before using the CLI.

Explanation of Different Builds

In the dist/ directory of the NPM package you will find many different builds of Vue.js. Here’s an overview of the difference between them:

Full: builds that contain both the compiler and the runtime.

Compiler: code that is responsible for compiling template strings into JavaScript render functions.

Runtime: code that is responsible for creating Vue instances, rendering and patching virtual DOM, etc. Basically everything minus the compiler.

UMD: UMD builds can be used directly in the browser via a <script> tag. 

The default file from jsDelivr CDN at https://cdn.jsdelivr.net/npm/vue@2.7.16 is the Runtime + Compiler UMD build (vue.js).

CommonJS: CommonJS builds are intended for use with older bundlers like browserify or webpack 1. The default file for these bundlers (pkg.main) is the Runtime only CommonJS build (vue.runtime.common.js).

ES Module: starting in 2.6 Vue provides two ES Modules (ESM) builds:

ESM for bundlers: intended for use with modern bundlers like webpack 2 or Rollup.

ESM format is designed to be statically analyzable so the bundlers can take advantage of that to perform “tree-shaking” and eliminate unused code from your final bundle.

The default file for these bundlers (pkg.module) is the Runtime only ES Module build (vue.runtime.esm.js).

ESM for browsers (2.6+ only): intended for direct imports in modern browsers via <script type="module">.

If you need to compile templates on the client (e.g. passing a string to the template option, or mounting to an element using its in-DOM HTML as the template), you will need the compiler and thus the full build:

When using vue-loader or vueify, templates inside *.vue files are pre-compiled into JavaScript at build time. You don’t really need the compiler in the final bundle, and can therefore use the runtime-only build.

Since the runtime-only builds are roughly 30% lighter-weight than their full-build counterparts, you should use it whenever you can. 

If you still wish to use the full build instead, you need to configure an alias in your bundler:

Development vs. Production Mode

Development/production modes are hard-coded for the UMD builds: the un-minified files are for development, and the minified files are for production.

CommonJS and ES Module builds are intended for bundlers, therefore we don’t provide minified versions for them. 

You will be responsible for minifying the final bundle yourself.

CommonJS and ES Module builds also preserve raw checks for process.env.NODE_ENV to determine the mode they should run in. 

You should use appropriate bundler configurations to replace these environment variables in order to control which mode Vue will run in. 

Replacing process.env.NODE_ENV with string literals also allows minifiers like UglifyJS to completely drop the development-only code blocks, reducing final file size.

In Webpack 4+, you can use the mode option:

But in Webpack 3 and earlier, you’ll need to use DefinePlugin:

Apply a global envify transform to your bundle.

Some environments, such as Google Chrome Apps, enforce Content Security Policy (CSP), which prohibits the use of new Function() for evaluating expressions. 

The full build depends on this feature to compile templates, so is unusable in these environments.

On the other hand, the runtime-only build is fully CSP-compliant. 

When using the runtime-only build with Webpack + vue-loader or Browserify + vueify, your templates will be precompiled into render functions which work perfectly in CSP environments.

Important: the built files in GitHub’s /dist folder are only checked-in during releases. 

To use Vue from the latest source code on GitHub, you will have to build it yourself!